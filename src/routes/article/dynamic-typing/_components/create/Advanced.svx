```ts
// Sample Database import
import db from './path/to/db';

// Sample interfaces (stands in as a Database model as well)
interface Person {
  name: string;
}

// Using Partial<Person>[] because PersonOrPeopleToCreate likely doesn't have all
// Of the required properties (id likely generated by the database)
type ResponseForCreate<PersonOrPeopleToCreate> = PersonOrPeopleToCreate extends Partial<Person>[]
  ? Person[]
  : Person;

const create = async <PersonOrPeopleToCreate extends Person | Person[]>(
  personOrPeople: PersonOrPeopleToCreate
): Promise<ResponseForCreate<PersonOrPeopleToCreate>> => {
  const createdData = await db.create(personOrPeople);
  return createdData as ResponseForCreate<PersonOrPeopleToCreate>;
};

const main = async () => {
  // Return types are inferred by the data passed to the create function
  const people: Person[] = await create([{ name: 'Arya Stark' }, { name: 'Jon Snow' }]);
  const person: Person = await create({ name: 'Jon Snow' });
};

main();
```